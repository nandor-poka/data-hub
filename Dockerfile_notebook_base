FROM debian:buster

LABEL maintainer="Dr. Nandor Poka / Data Hub Project <np@np-bio.info, data-hub.info>"
ARG NB_USER="biodatahub"
ARG NB_UID="1000"
ARG NB_GID="100"

USER root

# R pre-requisites, Java for later use, extra packages for notebook exporting to work
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    locales \
    fonts-liberation \
    fonts-dejavu \
    gfortran \
    gcc \
    openjdk-11-jdk \
    unzip \
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-generic-recommended \
    nodejs \
    npm \
    git

# Installing pandoc
RUN cd /tmp && wget https://github.com/jgm/pandoc/releases/download/2.9.2/pandoc-2.9.2-1-amd64.deb \
    && dpkg -i pandoc-2.9.2-1-amd64.deb \
    && rm pandoc-2.9.2-1-amd64.deb

# Environmental variables  for conda and for generic use
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID 

ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER

ENV PYTHONENV=$HOME/EMBL-Tools:$HOME/EMBL-Tools/ebml_client/

# Script for fixing permissions after installs
COPY fix-permissions.sh /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions
RUN useradd -m biodatahub

# Preparing conda install
RUN mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR


USER $NB_USER
WORKDIR $HOME
ARG PYTHON_VERSION=default

ENV MINICONDA_VERSION=4.8.2 \
    MINICONDA_MD5=87e77f097f6ebb5127c77662dfc3165e \
    CONDA_VERSION=4.8.2

RUN cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-py37_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --prepend channels bioconda && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    #conda config --system --set channel_priority strict && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned 
#RUN conda install --quiet --yes conda
#RUN conda install --quiet --yes pip 
#RUN conda update --all --quiet --yes 
RUN conda clean --all -f -y 
RUN rm -rf /home/$NB_USER/.cache/yarn \
    && fix-permissions $CONDA_DIR \
    && fix-permissions /home/$NB_USER

# Install Tini
RUN conda install --quiet --yes 'tini=0.18.0' && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

RUN conda install --yes \
    'jupyterhub=1.1.0' \
    'jupyterlab=2.1.0' \
    'ipywidgets=7.5.1' \ 
    'notebook=6.0.3' \
    'rise=5.6.1' \
    'biopython=1.76' \
    'pandas=0.25.1' \
    'numpy=1.17.2' \
    'matplotlib=3.1.1' \
    'scipy=1.3.1' \  
    'scikit-image=0.15.0' \
    'scikit-learn=0.21.3' \
    'statsmodels=0.10.1' \
    'bokeh=2.0.0' \
    'xmltramp2'=3.1.1 \
    'requests=2.23.0' \
    'feather-format=0.4.1' \
    'r-base=3.6.3' \
    'r-caret=6.0*' \
    'r-crayon=1.3*' \
    'r-devtools=2.3*' \
    'r-forecast=8.12*' \
    'r-hexbin=1.28*' \
    'r-htmltools=0.4*' \
    'r-htmlwidgets=1.5*' \
    'r-irkernel=1.1*' \
    'r-nycflights13=1.0*' \
    'r-plyr=1.8*' \
    'r-randomforest=4.6*' \
    'r-rcurl=1.98*' \
    'r-reshape2=1.4*' \
    'r-rmarkdown=2.1*' \
    'r-rsqlite=2.2*' \
    'r-shiny=1.4*' \
    'r-tidyverse=1.3*' \
    'rpy2=3.1*' \
    && \
    conda clean --all -f -y && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER


# Installing Biocondutor
USER root
ADD ./install_R_packages.r $HOME/install_R_packages.r 
RUN chmod +x $HOME/install_R_packages.r 
    
USER $NB_USER
RUN Rscript $HOME/install_R_packages.r \
    && rm $HOME/install_R_packages.r \
    && fix-permissions /home/$NB_USER

# Installing iJava kernel
RUN  mkdir tmp && cd tmp && wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip \
     && unzip ijava-1.3.0.zip && python3 install.py --sys-prefix && cd .. && rm -rf tmp


#Installing Julia
USER root
# Julia dependencies
# install Julia packages in /opt/julia instead of $HOME
ENV JULIA_DEPOT_PATH=/opt/julia
ENV JULIA_PKGDIR=/opt/julia
ENV JULIA_VERSION=1.4.1

RUN mkdir /opt/julia-${JULIA_VERSION} && \
    cd /tmp && \
    wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \
    echo "fd6d8cadaed678174c3caefb92207a3b0e8da9f926af6703fb4d1e4e4f50610a *julia-${JULIA_VERSION}-linux-x86_64.tar.gz" | sha256sum -c - && \
    tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \
    rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz
RUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia

# Show Julia where conda libraries are \
RUN mkdir /etc/julia && \
    echo "push!(Libdl.DL_LOAD_PATH, \"$CONDA_DIR/lib\")" >> /etc/julia/juliarc.jl && \
    # Create JULIA_PKGDIR \
    mkdir $JULIA_PKGDIR && \
    chown $NB_USER $JULIA_PKGDIR && \
    fix-permissions $JULIA_PKGDIR

USER $NB_UID

RUN julia -e 'import Pkg; Pkg.update()' && \
    julia -e 'import Pkg; Pkg.add("HDF5")' && \
    julia -e "using Pkg; pkg\"add IJulia\"; pkg\"precompile\"" && \
    # move kernelspec out of home \
    mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ && \
    chmod -R go+rx $CONDA_DIR/share/jupyter && \
    rm -rf $HOME/.local && \
    fix-permissions $JULIA_PKGDIR $CONDA_DIR/share/jupyter

# Extras
RUN mkdir -p $HOME/tools
ADD ./tools $HOME/tools

RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager

# Adding latest EMBL-Tools from github
ADD https://api.github.com/repos/nandor-poka/embl_tools/git/refs/heads/master embl_tools_version.json
RUN git clone -b master https://github.com/nandor-poka/embl_tools.git $HOME/EMBL-Tools \
    && cd $HOME/EMBL-Tools && pip install -r requirements.txt \
    && cd .. && rm embl_tools_version.json 

RUN pip install embl-tools-jl==0.2.2 \
    && jupyter lab build

RUN rm -rf /home/$NB_USER/.cache/yarn
ENV PYTHONPATH=$HOME/EMBL-Tools:$HOME/EMBL-Tools/ebml_client/